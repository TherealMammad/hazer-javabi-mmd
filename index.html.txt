<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>حاضر جواب هوشمند</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #e2e8f0; /* Light gray background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
        }
        .chat-container {
            width: 100%;
            max-width: 500px;
            height: 80vh; /* Responsive height */
            background-color: #ffffff;
            border-radius: 1.5rem; /* Rounded corners */
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        .chat-header {
            background-color: #6366f1; /* Indigo */
            color: #ffffff;
            padding: 1.5rem;
            text-align: center;
            font-size: 1.5rem;
            font-weight: 700;
            border-top-left-radius: 1.5rem;
            border-top-right-radius: 1.5rem;
        }
        .chat-messages {
            flex-grow: 1;
            padding: 1rem;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 0.75rem; /* Space between messages */
            background-color: #f8fafc; /* Lighter background for messages */
        }
        .message {
            max-width: 80%;
            padding: 0.75rem 1rem;
            border-radius: 1.25rem; /* More rounded */
            word-wrap: break-word;
            line-height: 1.5;
            box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        }
        .message.user {
            background-color: #a78bfa; /* Violet */
            color: #ffffff;
            align-self: flex-end;
            margin-left: auto; /* Align to right */
        }
        .message.app {
            background-color: #e0e7ff; /* Light indigo */
            color: #312e81; /* Dark indigo */
            align-self: flex-start;
            margin-right: auto; /* Align to left */
        }
        .chat-input {
            display: flex;
            padding: 1rem;
            background-color: #ffffff;
            border-top: 1px solid #e2e8f0;
            gap: 0.75rem;
        }
        .chat-input input[type="text"] {
            flex-grow: 1;
            padding: 0.75rem 1rem;
            border: 1px solid #cbd5e1; /* Slate border */
            border-radius: 1.5rem;
            outline: none;
            font-size: 1rem;
            transition: border-color 0.2s;
        }
        .chat-input input[type="text"]:focus {
            border-color: #6366f1; /* Indigo focus */
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);
        }
        .chat-input button {
            background-color: #6366f1; /* Indigo */
            color: #ffffff;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 1.5rem;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            transition: background-color 0.2s, transform 0.1s;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .chat-input button:hover {
            background-color: #4f46e5; /* Darker indigo */
            transform: translateY(-1px);
        }
        .chat-input button:active {
            transform: translateY(0);
        }
        .loading-indicator {
            display: none; /* Hidden by default */
            align-self: flex-start;
            margin-right: auto;
            padding: 0.75rem 1rem;
            border-radius: 1.25rem;
            background-color: #e0e7ff;
            color: #312e81;
            font-style: italic;
        }
        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
        }
        .loading-dots span {
            display: inline-block;
            animation: bounce 0.6s infinite alternate;
        }
        .loading-dots span:nth-child(2) { animation-delay: 0.2s; }
        .loading-dots span:nth-child(3) { animation-delay: 0.4s; }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            اپ حاضر جوابی ممد
        </div>
        <div class="chat-messages" id="chatMessages">
            <!-- Messages will be appended here -->
            <div class="message app">سلام! اومدی اینجا باز گوه بخوری؟</div>
        </div>
        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="پیام خود را بنویسید..." autocomplete="off">
            <button id="sendButton">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-send-horizontal">
                    <path d="m3 3 3 9-3 9 19-9Z"/><path d="M16 12H3"/>
                </svg>
                <span class="mr-2">ارسال</span>
            </button>
        </div>
    </div>

    <script type="module">
        // Get references to DOM elements
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const chatMessages = document.getElementById('chatMessages');

        // Function to scroll chat to the bottom
        function scrollToBottom() {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Function to add a message to the chat display
        function addMessage(text, sender) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message', sender);
            messageDiv.textContent = text;
            chatMessages.appendChild(messageDiv);
            scrollToBottom();
        }

        // Function to show a loading indicator
        function showLoading() {
            const loadingDiv = document.createElement('div');
            loadingDiv.classList.add('loading-indicator');
            loadingDiv.innerHTML = 'در حال فکر کردن <span class="loading-dots"><span>.</span><span>.</span><span>.</span></span>';
            loadingDiv.id = 'loadingIndicator';
            chatMessages.appendChild(loadingDiv);
            scrollToBottom();
        }

        // Function to hide the loading indicator
        function hideLoading() {
            const loadingDiv = document.getElementById('loadingIndicator');
            if (loadingDiv) {
                loadingDiv.remove();
            }
        }

        // Function to get a witty response from the LLM (Gemini API)
        async function getWittyResponse(userMessage) {
            showLoading(); // Show loading indicator

            // Instruction for the AI to be slightly impolite and funny
            const systemInstruction = "به عنوان یک دستیار حاضر جواب و شوخ‌طبع، به پیام کاربر پاسخ‌های هوشمندانه، خنده‌دار و کمی بی‌ادبانه (اما نه توهین‌آمیز) بده تا کاربر بخنده. سعی کن پاسخ‌ها خلاقانه و غیرمنتظره باشن و لحن شوخی رو حفظ کن.";

            let chatHistory = [];
            chatHistory.push({ role: "user", parts: [{ text: systemInstruction + "\n\n" + userMessage }] });

            const payload = { contents: chatHistory };
            // The API key will be provided by the Canvas environment during runtime.
            // Do NOT hardcode or provide an API key here.
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();
                hideLoading(); // Hide loading indicator after response

                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    return result.candidates[0].content.parts[0].text;
                } else {
                    console.error('Unexpected API response structure:', result);
                    return 'ببخشید، نتونستم حاظر جوابی کنم. یه مشکل پیش اومد.';
                }
            } catch (error) {
                hideLoading(); // Hide loading indicator on error
                console.error('Error calling Gemini API:', error);
                return 'اوه! ظاهراً ارتباط با هوش مصنوعی قطع شده. بعداً دوباره امتحان کن!';
            }
        }

        // Event listener for sending message
        sendButton.addEventListener('click', async () => {
            const userMessage = messageInput.value.trim();
            if (userMessage) {
                addMessage(userMessage, 'user'); // Add user message to chat
                messageInput.value = ''; // Clear input field

                const appResponse = await getWittyResponse(userMessage);
                addMessage(appResponse, 'app'); // Add app's response to chat
            }
        });

        // Allow sending message with Enter key
        messageInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                sendButton.click();
            }
        });

        // Initial scroll to bottom to show the welcome message
        scrollToBottom();
    </script>
</body>
</html>
